CREATE DATABASE WORKERS;
USE WORKERS;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) 
VALUES  (001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
        
SELECT * FROM WORKER;

-- SQL QUESTIONS

-- 1) WRITE A QUERY TO FETCH THE FIRST_NAME FROM WORKER TABLE USING ALIAS NAME AS WORKER_NAME.

SELECT FIRST_NAME AS WORKER_NAME FROM WORKER ;


-- 2) WRITE A QUERY TO FETCH UNIQUE VALUES OF DEPARTMENT FROM THE WORKER TABLE.

SELECT DISTINCT(DEPARTMENT) FROM WORKER;


-- 3) WRITE A QUERY TO SHOW THE LAST 5 RECORDS FROM THE WORKER TABLE.

SELECT * FROM WORKER
ORDER BY WORKER_ID DESC
LIMIT 5;

-- 4) WRITE A QUERY TO PRINT THE FIRST THREE CHARACTERS OF FIRST_NAME FROM WORKER TABLE.

SELECT left(FIRST_NAME,3) AS FIRST_NAME_3_CHAR 
FROM WORKER;

-- 5) WRITE AN SQL QUERY TO FIND THE POSITION OF THE ALPHABET 'a' IN THE FIRST_NAME COLUMN 'Amitabh' FROM WORKER TABLE.

SELECT LOCATE("a" , "Amitabh",2); 


-- 6) WRITE AN SQL QUERY TO PRINT THE NAME OF THE EMPLOYEES HAVING THE HIGHEST SALARY IN EACH DEPARTMENT

WITH SALARY_RANKING AS
(SELECT *, RANK()
OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) RANKING
FROM WORKER)
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT, SALARY
FROM SALARY_RANKING
WHERE RANKING=1 ;

-- 7) WRITE A SQL QUERY TO PRINT THE FIRST NAME FROM THE WORKERS TABLE AFTER REMOVING WHITE SPACES FROM THE RIGHT SIDE. 

SELECT RTRIM(FIRST_NAME) AS TRIMMED_FIRST_NAMES
FROM WORKER;

-- 8) WRITE AN SQL QUERY THAT FETCHES THE UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE AND PRINTS ITS LENGTH.

SELECT DISTINCT(DEPARTMENT) AS UNIQUE_DEPARTMENTS, LENGTH(DEPARTMENT) AS LENGTH_OF_DEPT_NAMES
FROM WORKER;


-- 9) WRITE AN SQL QUERY TO FETCH nth MAX SALARIES FROM A TABLE. 

WITH RANKED_SALARY AS
(SELECT *, DENSE_RANK()
OVER (ORDER BY SALARY DESC) RANKING_AS_PER_SALARY
FROM WORKER)
SELECT * 
FROM RANKED_SALARY
WHERE RANKING_AS_PER_SALARY=n;
-- n is the nth highest salary that you need.

-- 10) WRITE AN SQL QUERY TO PRINT THE FIRST_NAME COLUMN FROM THE WORKER TABLE AFTER REPLACING 'a' WITH 'A'. 

SELECT REPLACE(FIRST_NAME,'a','A') AS REPLACED_NAME
FROM WORKER;

-- 11) WRITE AN SQL QUERY TO PRINT ALL WORKER DETAILS FROM THE WORKER TABLE ORDER BY FIRST_NAME ASCENDING AND DEPARTMENT DESCENDING. 

SELECT * 
FROM WORKER 
ORDER BY FIRST_NAME ASC, DEPARTMENT DESC; 

-- 12) WRITE AN SQL QUERY TO FETCH THE NAMES OF THE WORKERS WHO EARN THE HIGHEST SALARY. 

SELECT FIRST_NAME, LAST_NAME, SALARY
FROM WORKER
WHERE SALARY = (SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 1);

-- 13) WRITE AN SQL QUERY TO PRINT DETAILS OF WORKERS EXCLUDING FIRST_NAME'S 'Vipul' AND 'Satish' FROM WORKER TABLE. 

SELECT *
FROM WORKER 
WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');

-- 14) WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHOSE FIRST_NAME ENDS WITH 'h' AND CONTAINS SIX ALPHABETS. 

SELECT * 
FROM WORKER 
WHERE RIGHT(FIRST_NAME,1) = 'h' AND LENGTH(FIRST_NAME)=6;

-- 15) WRITE A QUERY TO VALIDATE EMAIL OF EMPLOYEE. 
-- VALIDATE MEANS CHECKING WHETHER THE EMAIL ENTERED IS OF THE REQUIRED FORMAT LIKE 'ABC@GMAIL.COM'.
-- LET US ASSUME A FIELD 'EMP_EMAIL' WITH EMAIL ID'S OF THE EMPLOYEES

SELECT *
FROM WORKER 
WHERE EMP_EMAIL LIKE '%@gmail.com';

-- 16) WRITE AN SQL QUERY TO PRINT DETAILS OF THE WORKERS WHO HAVE JOINED IN FEB 2014. 

SELECT *
FROM WORKER 
WHERE JOINING_DATE LIKE '2014-02-%';

-- 17) WRITE AN SQL QUERY TO FETCH DUPLICATE RECORDS HAVING MATCHING DATA IN SOME FIELDS OF A TABLE. 

-- LET US ASSUME THAT WE WANT TO CHECK FOR DUPLICATE RECORDS WHICH HAVE MATCHING DATA IN THE SALARY AND DEPARTMENT FIELDS TOGETHER. 
SELECT SALARY, DEPARTMENT ,COUNT(*)
FROM WORKER 
GROUP BY  SALARY, DEPARTMENT
HAVING COUNT(*)>1;

-- 18) HOW TO REMOVE DUPLICATE ROWS FROM TABLE? 

WITH DUPLICATE_RECORDS AS
(SELECT *, ROW_NUMBER() 
OVER (PARTITION BY SALARY, DEPARTMENT) COUNT_NO
FROM WORKER )
DELETE FROM DUPLICATE_RECORDS
WHERE COUNT_NO>1;
-- IN 'MySQL', CTE(COMMON TABLE EXPRESSIONS) IS CREATED AS A READ ONLY FILE, HENCE NO UPDATE OR DELETE IS POSSIBLE. 
-- BUT THE SAME IS POSSIBLE IN 'MS SQL SERVER'. TO COUNTER THIS IN MySQL pROVIDES YOU WITH THE DELETE JOIN STATEMENT
-- THT ALLOWS YOU TO REMOVE DUPLICATE ROWS QUICKLY. 

SET SQL_SAFE_UPDATES = 0; -- TO REMOVE THE SAFE UDATE MODE OTHERWISE MySQL DOES NOT ALLOW ANY UPDATE/DELETE.  

DELETE W1 FROM WORKER W1
INNER JOIN WORKER W2
WHERE W1.WORKER_ID < W2.WORKER_ID
AND W1.SALARY= W2.SALARY
AND W1.DEPARTMENT=W2.DEPARTMENT;

SELECT *, COUNT(*)
FROM WORKER 
GROUP BY SALARY, DEPARTMENT
HAVING COUNT(*)>1; -- SHOWS THAT THERE ARE NO DUPLICATE RECORDS IN SALARY AND DEPARTMENT. 


-- 19) WRITE AN SQL QUERY TO SHOW ONLY ODD ROWS FROM A TABLE. 

WITH INDEXED_TABLE AS
(SELECT * , ROW_NUMBER()
OVER (ORDER BY WORKER_ID) ROW_NO
FROM WORKER)
SELECT * FROM INDEXED_TABLE
WHERE MOD(ROW_NO,2); 

-- 20) WRITE AN SQL QUERY TO CLONE A NEW TABLE FROM ANOTHER TABLE. 

-- i) SIMPLE CLONING - COPIES THE ENTIRE TABLE STRUCTURE WITH THE DATA

CREATE TABLE WORKER_NEW SELECT * FROM WORKER; 

-- ii) SHALLOW CLONING -- SHOWS ONLY THE TABLE STRUCTURE. NO DATA IS COPIED.

CREATE TABLE WORKER_NEW LIKE WORKER;

-- iii) DEEP CLONING

CREATE TABLE WORKER_NEW LIKE WORKER;
INSERT INTO WORKER_NEW SELECT * FROM WORKER;

-- 21) WRITE AN SQL QUERY TO FETCH INTERSECTING RECORDS OF TWO TABLES

-- LET'S CREATE TWO TABLES
CREATE TABLE LIST1 
(
ID INT,
NAME VARCHAR(100)
);

INSERT INTO LIST1
VALUES
 (1,"Meera"),
 (2,"Gowri");

CREATE TABLE LIST2 LIKE LIST1;

INSERT INTO LIST2
VALUES 
(2,"Gowri"),
(3,"Ved");

SELECT * FROM LIST1
INTERSECT
SELECT * FROM LIST2; 
-- MySQL DOES NOT SUPPORT INTERSECT. 

-- 22) WRITE AN SQL QUERY TO SHOW RECORDS FROM ONE TABLE THAT ANOTHER TABLE DOES NOT HAVE. 

SELECT * FROM LIST
MINUS
SELECT * FROM LIST2;

-- 23) WRITE AN SQL QUERY TO SHOW THE TOP N (SAY 10) RECORDS OF THE TABLE. 

SELECT * 
FROM WORKER 
ORDER BY SALARY DESC
LIMIT 10;

-- 24) WRITE AN SQL QUERY TO DETERMINE THE NTH(SAY N=5) HIGHEST SALARY FROM A TABLE. 

SELECT SALARY 
FROM WORKER 
ORDER BY SALARY DESC 
LIMIT 4,1;  -- 4=N-1

-- 25) WRITE AN SQL QUERY TO DETERMINE THE 5TH(SAY N=5) WITHOUT USING TOP OR LIMIT METHOD. 

WITH SALARY_RANKING AS
(SELECT SALARY, DENSE_RANK()
OVER (ORDER BY SALARY DESC) RANKING
FROM WORKER )
SELECT SALARY 
FROM SALARY_RANKING
WHERE RANKING=5;

-- 26) WRITE AN SQL QUERY TO FETCH THE LIST OF EMPLOYEES WITH THE SAME SALARY

INSERT INTO WORKER 
VALUES (004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'); -- ADDING A RECORD WITH SAME SALARY. 

SELECT W1.FIRST_NAME, W1.LAST_NAME
FROM WORKER W1 JOIN WORKER W2
WHERE W1.SALARY= W2.SALARY
AND W1.WORKER_ID != W2.WORKER_ID;


























